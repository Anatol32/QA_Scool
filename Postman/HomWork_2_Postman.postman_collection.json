{
	"info": {
		"_postman_id": "40989a5b-ce20-4e8a-bd5a-55362e332db3",
		"name": "HomWork_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp = pm.response.json()\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test('name', function () {\r",
							"    pm.expect(resp.name).to.eql(\"Tolia\")\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age\", () => {\r",
							"    pm.expect(resp.age).to.eql('32')    \r",
							"})\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test('salary', () => {\r",
							"    pm.expect(resp.salary).to.eql(1500)\r",
							"})\r",
							"\r",
							"var req = request.data;\r",
							"var sal = Number(req.salary)\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('req name', () => {\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('req age', () => {\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"})\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('req salary', () => {\r",
							"    pm.expect(resp.salary).to.eql(sal)\r",
							"})\r",
							"\r",
							"console.log(resp.family)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('salary 1.5 year', () => {\r",
							"    pm.expect(req.salary*4).to.eql(resp.family.u_salary_1_5_year)\r",
							"} ) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tolia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json ()\r",
							"let req = pm.request.url.query\r",
							"\r",
							"console.log(req)\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('req name', () => {\r",
							"    pm.expect(resp.name).to.eql(req.reference.name.value)\r",
							"})\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('req age', () => {\r",
							"    pm.expect(resp.age).to.eql(req.reference.age.value)\r",
							"})\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('req salary', () => {\r",
							"    pm.expect(resp.salary).to.eql(+req.reference.salary.value)\r",
							"})\r",
							"console.log(resp.family)\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('dog=name', () => {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('dog=age', () => {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test('name=Luky', () => {\r",
							"    pm.expect(resp.family.pets.dog.name).to.have.include(\"Luky\")\r",
							"})\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test('name=4', () => {\r",
							"    pm.expect(resp.family.pets.dog.age).to.have.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Tolia&age=32&salary=1500",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tolia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"//Спарсить request.\r",
							"let resp = pm.response.json ()\r",
							"let req = pm.request.url.query\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('name_res = name_req', () => {\r",
							"    pm.expect(resp.name).to.eql(req.reference.name.value)\r",
							"})\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('age_tes = age_req', () => {\r",
							"    pm.expect(resp.age).to.eql(+req.reference.age.value)\r",
							"})\r",
							"//Вывести в консоль параметр salary из request.\r",
							"//Вывести в консоль параметр salary из response.\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(req.reference.salary.value)\r",
							"console.log(resp.salary)\r",
							"console.log(resp.salary[0])\r",
							"console.log(resp.salary[1])\r",
							"console.log(resp.salary[2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('salary[0] = salary_req', () => {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.reference.salary.value)\r",
							"})\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('salary[1] = salary*2', () => {\r",
							"    pm.expect(Number(resp.salary[1])).to.eql(req.reference.salary.value*2)\r",
							"})\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('salary[2] = salary*3', () => {\r",
							"    pm.expect(Number(resp.salary[2])).to.eql(req.reference.salary.value*3)\r",
							"})\r",
							"//Передать в окружение переменную name\r",
							"//Передать в окружение переменную age\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set('Name',resp.name)\r",
							"pm.environment.set('Age',resp.age)\r",
							"pm.environment.set('Salary',resp.salary[0])\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let s = resp.salary\r",
							"for(var i = 0; i < s.length; i++){\r",
							"    console.log(s[i], 'for')\r",
							"}\r",
							"// ИЛИ\r",
							"s.forEach(sal => console.log(sal, 'forEach'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Tolia&age=32&salary=1200",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tolia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let resp = pm.response.json();\r",
							"let sal = JSON.parse(request.data.salary);\r",
							"let ag = JSON.parse(request.data.age);\r",
							"let req = pm.request.data\r",
							"//Проверить, что json response имеет параметр start_qa_salar \r",
							"pm.test('response имеет параметр start_qa_salary', () => {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('response имеет параметр qa_salary_after_6_months', () => {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('response имеет параметр qa_salary_after_12_months', () => {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('response имеет параметр qa_salary_after_1.5_year', () => {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('response имеет параметр qa_salary_after_3.5_year', () => {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test('response имеет параметр person', () => {\r",
							"    pm.expect(resp).to.have.property(\"person\")\r",
							"})\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('start_qa_salary равен salary из request', () => {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(sal)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_6_months равен salary*2 из request', () => {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(sal*2)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_12_months равен salary*2.7 из request', () => {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(sal*2.7)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let r = resp[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"pm.test('qa_salary_after_1.5_year равен salary*3.3 из request', () => {\r",
							"    pm.expect(r).to.have.eql(sal*3.3)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let t = resp[\"qa_salary_after_3.5_years\"]\r",
							"\r",
							"pm.test('qa_salary_after_3.5_year равен salary*3.8 из request', () => {\r",
							"    pm.expect(t).to.have.eql(sal*3.8)\r",
							"})\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('person, 1-й элемент из u_name равен salary из request', () => {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(sal)\r",
							"})\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('u_age равен age из request', () => {\r",
							"    pm.expect(resp.person.u_age).to.eql(ag)\r",
							"})\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('u_salary_5_years равен salary*4.2', () => {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(sal*4.2)\r",
							"})\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var key in resp){\r",
							"    console.log( \"Kay: \" + key + \" valyes: \" + resp[key] );\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{Age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}